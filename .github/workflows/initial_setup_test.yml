name: Test Initial Setup

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      use-cache:
        description: "Use cached dependencies"
        required: false
        default: "true"

jobs:
  initial_setup:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Check Out Repository
        uses: actions/checkout@v2

      # Step 2: Set Up Python
      - name: Set Up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      # Step 3: Conditionally Cache Python dependencies
      - name: Cache Python dependencies
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.use-cache == 'true' }}
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Create Virtual Environment
      - name: Create Virtual Environment
        run: |
          set -e
          python -m venv venv
          echo "Virtual environment created."

      # Step 5: Install Python Dependencies
      - name: Install Python Dependencies
        run: |
          set -e
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      # Step 6: Set Up .env File
      - name: Set Up .env File
        run: |
          set -e
          source venv/bin/activate
          cp .env.template .env
          PROJECT_ROOT=$(pwd)
          sed -i "s|/path/to/your/project/root|$PROJECT_ROOT|g" .env

      # Step 7: Configure Database and Show Table Info
      - name: Configure Database and Show Table Info
        run: |
          set -e
          source venv/bin/activate
          sed -i 's|path: "data/NBA_AI_2023_2024.sqlite"|path: "data/NBA_AI_BASE.sqlite"|g' config.yaml

          # Display database tables and record counts in a formatted table
          DB_PATH="data/NBA_AI_BASE.sqlite"
          echo -e "\nDatabase Tables and Record Counts:"
          echo "------------------------------------"
          printf "%-20s | %-10s\n" "Table Name" "Record Count"
          echo "------------------------------------"

          for table in $(sqlite3 $DB_PATH ".tables"); do
            count=$(sqlite3 $DB_PATH "SELECT COUNT(*) FROM $table;")
            printf "%-20s | %-10s\n" "$table" "$count"
          done
          echo "------------------------------------"

      # Step 8: Launch the Application
      - name: Launch Application
        run: |
          set -e
          source venv/bin/activate
          # Start the app in the background and log output to app.log
          python start_app.py > app.log 2>&1 &
          APP_PID=$!
          sleep 5  # Allow some time for the app to initialize

      # Step 9: Check the Status Code
      - name: Check Status Code
        run: |
          set -e
          # Capture and print only the HTTP status code
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:5000)
          echo "HTTP Status Code: $STATUS_CODE"
          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "Web app did not respond with 200 OK"
            exit 1
          fi

      # Step 10: Install Node.js and Puppeteer (for testing only)
      - name: Set up Node.js and Install Puppeteer
        uses: actions/setup-node@v2
        with:
          node-version: "14"
      - run: npm install puppeteer

      # Step 11: Inline Puppeteer Script to Verify Content Load Status
      - name: Verify Content Load with Puppeteer
        run: |
          node -e "
            const puppeteer = require('puppeteer');
            (async () => {
              const browser = await puppeteer.launch();
              const page = await browser.newPage();
              try {
                // Navigate to the web app's URL and wait for the initial page load
                await page.goto('http://127.0.0.1:5000', { waitUntil: 'networkidle2' });

                // Wait specifically for the 'get-game-data' request to complete
                await page.waitForResponse(response =>
                  response.url().includes('get-game-data') && response.status() === 200, 
                  { timeout: 120000 }  // Set a timeout for 2 minutes
                );

                console.log('Main data loaded. Waiting an additional 10 seconds for images and icons to load...');

                // Wait an additional 10 seconds to allow images and other assets to load
                await page.waitForTimeout(10000);

                console.log('All main data and assets should now be loaded.');
                process.exit(0);  // Exit successfully
              } catch (error) {
                console.error('Content did not fully load within the expected duration.', error);
                process.exit(1);  // Exit with failure
              } finally {
                await browser.close();
              }
            })();
          "

      # Step 12: Stop the Application
      - name: Stop Application
        if: ${{ always() }}
        run: kill $APP_PID || true
