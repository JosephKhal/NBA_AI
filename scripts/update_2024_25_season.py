#!/usr/bin/env python3
"""
Script d'int√©gration des donn√©es de la saison 2024-25
Automatise la mise √† jour compl√®te du syst√®me NBA_AI
"""

import argparse
import logging
import os
import sys
from datetime import datetime

# Ajouter le r√©pertoire src au path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from src.config import config
from src.database_updater.database_update_manager import update_database
from src.database_audit import database_audit
from src.logging_config import setup_logging

def main():
    """Script principal d'int√©gration 2024-25"""
    parser = argparse.ArgumentParser(description="Int√©gration des donn√©es NBA 2024-25")
    parser.add_argument("--log_level", default="INFO", help="Niveau de logging")
    parser.add_argument("--force", action="store_true", help="Force la mise √† jour m√™me si les donn√©es existent")
    parser.add_argument("--audit", action="store_true", help="Effectue un audit apr√®s la mise √† jour")
    
    args = parser.parse_args()
    setup_logging(log_level=args.log_level.upper())
    
    logging.info("üèÄ D√©but de l'int√©gration des donn√©es NBA 2024-25")
    
    try:
        # √âtape 1: Mise √† jour de la configuration
        update_config_for_2024_25()
        
        # √âtape 2: Mise √† jour des donn√©es
        update_season_data("2024-2025", force=args.force)
        
        # √âtape 3: Audit des donn√©es (optionnel)
        if args.audit:
            audit_results = database_audit("2024-2025", output_file="audit_2024_25.csv")
            logging.info(f"Audit termin√©. R√©sultats sauv√©s dans audit_2024_25.csv")
        
        # √âtape 4: Mise √† jour des mod√®les
        update_prediction_models()
        
        logging.info("‚úÖ Int√©gration 2024-25 termin√©e avec succ√®s!")
        
    except Exception as e:
        logging.error(f"‚ùå Erreur lors de l'int√©gration: {e}")
        sys.exit(1)

def update_config_for_2024_25():
    """Met √† jour la configuration pour inclure 2024-25"""
    logging.info("üìù Mise √† jour de la configuration...")
    
    # V√©rifier que 2024-2025 est dans les saisons valides
    valid_seasons = config.get("api", {}).get("valid_seasons", [])
    if "2024-2025" not in valid_seasons:
        logging.warning("‚ö†Ô∏è  2024-2025 n'est pas dans les saisons valides du config.yaml")
        logging.info("Ajoutez '2024-2025' √† la liste api.valid_seasons dans config.yaml")

def update_season_data(season, force=False):
    """Met √† jour toutes les donn√©es pour une saison"""
    logging.info(f"üìä Mise √† jour des donn√©es pour la saison {season}")
    
    # Mise √† jour compl√®te avec tous les pr√©dicteurs
    predictors = ["Baseline", "Linear", "Tree", "MLP"]
    
    for predictor in predictors:
        logging.info(f"üîÑ Mise √† jour avec le pr√©dicteur {predictor}")
        try:
            update_database(season=season, predictor=predictor)
            logging.info(f"‚úÖ {predictor} mis √† jour avec succ√®s")
        except Exception as e:
            logging.error(f"‚ùå Erreur avec {predictor}: {e}")

def update_prediction_models():
    """Met √† jour les mod√®les de pr√©diction avec les nouvelles donn√©es"""
    logging.info("ü§ñ Mise √† jour des mod√®les de pr√©diction...")
    
    # Cette fonction pourrait d√©clencher le r√©entra√Ænement des mod√®les
    # Pour l'instant, on log juste les √©tapes n√©cessaires
    
    steps = [
        "1. Extraire les features de 2024-25",
        "2. Combiner avec les donn√©es historiques", 
        "3. R√©entra√Æner les mod√®les Linear, Tree, MLP",
        "4. Valider les performances",
        "5. Sauvegarder les nouveaux mod√®les"
    ]
    
    for step in steps:
        logging.info(f"üìã {step}")
    
    logging.warning("‚ö†Ô∏è  Le r√©entra√Ænement automatique n'est pas encore impl√©ment√©")
    logging.info("üí° Ex√©cutez manuellement les scripts dans src/model_training/")

if __name__ == "__main__":
    main()